{"version":3,"file":"static/js/304.0ee9cf03.chunk.js","mappings":"8JACA,GAAgB,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,0B,SCOhL,EALgB,SAACA,GACb,OAAO,gBAAKC,UAAWC,EAAAA,QAAhB,SAA4BF,EAAMG,SAE5C,E,UCOD,EAVmB,SAACH,GAChB,OAAO,gBAAKC,UAAWC,EAAAA,OAAW,IAAMA,EAAAA,OAAjC,UACH,SAAC,KAAD,CAASE,GAAI,YAAcJ,EAAMK,GAAjC,SAAsCL,EAAMM,QAEnD,E,uCCqCD,EAtCgB,SAACN,GACb,IAAIO,EAAQP,EAAMQ,YACdC,EAAiBF,EAAMG,QAAQC,KAAI,SAAAC,GAAM,OAAI,SAAC,EAAD,CAAYN,KAAMM,EAAON,KAAsBD,GAAIO,EAAOP,IAAtBO,EAAOP,GAA/C,IACzCQ,EAAmBN,EAAMO,SAASH,KAAI,SAAAR,GAAO,OAAI,SAAC,EAAD,CAA2BA,QAASA,EAAQA,SAA7BA,EAAQE,GAA3B,IAQ3CU,GAAeC,EAAAA,EAAAA,GAAiB,KAYhCC,GAAsBC,EAAAA,EAAAA,GAAU,CAACC,KAAK,wBAAhBD,EAXL,SAAClB,GACpB,OACI,iBAAMoB,SAAUpB,EAAMqB,aAAtB,UACI,iBAAKpB,UAAWC,EAAAA,SAAY,IAAKA,EAAAA,QAAjC,WACI,SAACoB,EAAA,EAAD,CAAQC,UAAWC,EAAAA,GAAUlB,KAAM,iBAAkBmB,SAAU,CAACC,EAAAA,EAASX,GAAeY,YAAa,2BACrG,0BAAK,2CAIpB,IAID,OACI,iBAAK1B,UAAWC,EAAAA,QAAhB,WACI,gBAAKD,UAAWC,EAAAA,aAAhB,SACKO,KAEL,gBAAKR,UAAWC,EAAAA,SAAhB,UACI,yBAAMW,OAGV,SAACI,EAAD,CAAqBG,SA7BT,SAACQ,GACjBC,QAAQC,IAAIF,EAAOG,gBACnB/B,EAAMgC,YAAYJ,EAAOG,eAC5B,MA6BJ,E,wFCxCGE,EAA6B,SAAC1B,GAAD,MAC5B,CACG2B,OAAO3B,EAAM4B,KAAKD,OAFO,ECoBjC,GAAeE,EAAAA,EAAAA,KAAQC,EAAAA,EAAAA,KAfD,SAAC9B,GACnB,MAAO,CACHC,YAAaD,EAAMC,YAE1B,IACwB,SAAC8B,GACtB,MAAO,CACHN,YAAa,SAACD,GACVO,GAASC,EAAAA,EAAAA,IAAmBR,GAC/B,EAKR,KDf+B,SAACS,GAChC,IACSC,EADV,0IAEQ,WAAU,OAAIC,KAAK1C,MAAMkC,QACd,SAACM,GAAD,UAAcE,KAAK1C,SADS,SAAC,KAAD,CAAUI,GAAI,UAEpD,KAJT,GACoCuC,EAAAA,WAOhC,OADqCN,EAAAA,EAAAA,IAAQJ,EAARI,CAAoCI,EAE5E,GCMD,CACCG,E","sources":["webpack://my-app/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/Message/Message.jsx","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Dialogs.jsx","HOC/withAuthRedirect.js","components/Dialogs/DialogsContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__UT1vU\",\"dialogsItems\":\"Dialogs_dialogsItems__WOrQW\",\"active\":\"Dialogs_active__7-V0f\",\"messages\":\"Dialogs_messages__tAhYa\",\"message\":\"Dialogs_message__c+liJ\"};","import c from \"./../Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Message = (props) => {\r\n    return <div className={c.message}>{props.message}</div>\r\n\r\n}\r\n\r\nexport default Message;","import c from \"./../Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst DialogItem = (props) => {\r\n    return <div className={c.dialog + ' ' + c.active}>\r\n        <NavLink to={\"/dialogs/\" + props.id}>{props.name}</NavLink>\r\n    </div>\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default DialogItem;","import c from \"./Dialogs.module.css\";\r\nimport Message   from \"./Message/Message\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validator\";\r\nconst Dialogs = (props) => {\r\n    let state = props.dialogsPage;\r\n    let dialogElements = state.dialogs.map(dialog => <DialogItem name={dialog.name} key={dialog.id} id={dialog.id}/>)\r\n    let messagesElements = state.messages.map(message => <Message  key={message.id} message={message.message}/>)\r\n\r\n    let addNewMessage = (values)=>{\r\n        console.log(values.newMessageBody)\r\n        props.sendMessage(values.newMessageBody)\r\n    }\r\n\r\n\r\n    const maxLength100 = maxLengthCreator(100);\r\n    const AddMessageForm = (props)=>{\r\n        return (\r\n            <form onSubmit={props.handleSubmit}>\r\n                <div className={c.messages+ \" \" +c.message }>\r\n                    <Field  component={Textarea} name={\"newMessageBody\"} validate={[required,maxLength100]} placeholder={'Enter your message...'}/>\r\n                    <div><button>Send</button></div>\r\n                </div>\r\n            </form>\r\n        )\r\n    }\r\n\r\n    const AddMessageFormRedux = reduxForm({form:\"dialogAddMessageForm\"})(AddMessageForm)\r\n\r\n    return (\r\n        <div className={c.dialogs}>\r\n            <div className={c.dialogsItems}>\r\n                {dialogElements}\r\n            </div>\r\n            <div className={c.messages}>\r\n                <div>{messagesElements}</div>\r\n\r\n            </div>\r\n            <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n        </div>\r\n    )\r\n}\r\nexport default Dialogs;","import React, {Component} from \"react\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nlet mapStateToPropsForRedirect = (state)=>\r\n    ({\r\n        isAuth:state.auth.isAuth\r\n    })\r\nexport const withAuthRedirect = (Component)=>\r\n{\r\n    class RedirectComponent extends React.Component{\r\n        render() {if(!this.props.isAuth) return<Navigate to={'/login'}/>\r\n            return <Component{...this.props}/>\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n    return ConnectedAuthRedirectComponent;\r\n}","import store, {sendMessageCreator} from \"../../redux/store\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport React from \"react\";\r\nimport {compose} from \"redux\";\r\nimport {withAuthRedirect} from \"../../HOC/withAuthRedirect\";\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendMessage: (newMessageBody) => {\r\n            dispatch(sendMessageCreator(newMessageBody));\r\n        }\r\n\r\n\r\n    }\r\n\r\n}\r\nexport default compose(connect(mapStateToProps, mapDispatchToProps),withAuthRedirect)\r\n(Dialogs);\r\n"],"names":["props","className","c","message","to","id","name","state","dialogsPage","dialogElements","dialogs","map","dialog","messagesElements","messages","maxLength100","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","values","console","log","newMessageBody","sendMessage","mapStateToPropsForRedirect","isAuth","auth","compose","connect","dispatch","sendMessageCreator","Component","RedirectComponent","this","React","Dialogs"],"sourceRoot":""}